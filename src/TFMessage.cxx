// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file TFMessage.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace { char dummy; }
#endif

#include "TFMessage.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

eprosima::tf2_msgs::msg::TFMessage::TFMessage()
{
    // m_transforms com.eprosima.idl.parser.typecode.SequenceTypeCode@459e9125


}

eprosima::tf2_msgs::msg::TFMessage::~TFMessage()
{
}

eprosima::tf2_msgs::msg::TFMessage::TFMessage(const TFMessage &x)
{
    m_transforms = x.m_transforms;
}

eprosima::tf2_msgs::msg::TFMessage::TFMessage(TFMessage &&x)
{
    m_transforms = std::move(x.m_transforms);
}

eprosima::tf2_msgs::msg::TFMessage& eprosima::tf2_msgs::msg::TFMessage::operator=(const TFMessage &x)
{

    m_transforms = x.m_transforms;

    return *this;
}

eprosima::tf2_msgs::msg::TFMessage& eprosima::tf2_msgs::msg::TFMessage::operator=(TFMessage &&x)
{

    m_transforms = std::move(x.m_transforms);

    return *this;
}

size_t eprosima::tf2_msgs::msg::TFMessage::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < 100; ++a)
    {
        current_alignment += eprosima::geometry_msgs::msg::TransformStamped::getMaxCdrSerializedSize(current_alignment);}

    return current_alignment - initial_alignment;
}

size_t eprosima::tf2_msgs::msg::TFMessage::getCdrSerializedSize(const eprosima::tf2_msgs::msg::TFMessage& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < data.transforms().size(); ++a)
    {
        current_alignment += eprosima::geometry_msgs::msg::TransformStamped::getCdrSerializedSize(data.transforms().at(a), current_alignment);}

    return current_alignment - initial_alignment;
}

void eprosima::tf2_msgs::msg::TFMessage::serialize(eprosima::fastcdr::Cdr &scdr) const
{

    scdr << m_transforms;}

void eprosima::tf2_msgs::msg::TFMessage::deserialize(eprosima::fastcdr::Cdr &dcdr)
{

    dcdr >> m_transforms;}

/*!
 * @brief This function copies the value in member transforms
 * @param _transforms New value to be copied in member transforms
 */
void eprosima::tf2_msgs::msg::TFMessage::transforms(const std::vector<eprosima::geometry_msgs::msg::TransformStamped> &_transforms)
{
m_transforms = _transforms;
}

/*!
 * @brief This function moves the value in member transforms
 * @param _transforms New value to be moved in member transforms
 */
void eprosima::tf2_msgs::msg::TFMessage::transforms(std::vector<eprosima::geometry_msgs::msg::TransformStamped> &&_transforms)
{
m_transforms = std::move(_transforms);
}

/*!
 * @brief This function returns a constant reference to member transforms
 * @return Constant reference to member transforms
 */
const std::vector<eprosima::geometry_msgs::msg::TransformStamped>& eprosima::tf2_msgs::msg::TFMessage::transforms() const
{
    return m_transforms;
}

/*!
 * @brief This function returns a reference to member transforms
 * @return Reference to member transforms
 */
std::vector<eprosima::geometry_msgs::msg::TransformStamped>& eprosima::tf2_msgs::msg::TFMessage::transforms()
{
    return m_transforms;
}

size_t eprosima::tf2_msgs::msg::TFMessage::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool eprosima::tf2_msgs::msg::TFMessage::isKeyDefined()
{
   return false;
}

void eprosima::tf2_msgs::msg::TFMessage::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
    (void) scdr;
     
}


