// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file BatteryState.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace
{
char dummy;
}
#endif

#include "BatteryState.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

eprosima::sensor_msgs::msg::BatteryState::BatteryState()
{
    // m_header com.eprosima.fastrtps.idl.parser.typecode.StructTypeCode@47af7f3d

    // m_voltage com.eprosima.idl.parser.typecode.PrimitiveTypeCode@7c729a55
    m_voltage = 0.0;
    // m_temperature com.eprosima.idl.parser.typecode.PrimitiveTypeCode@3bb9a3ff
    m_temperature = 0.0;
    // m_current com.eprosima.idl.parser.typecode.PrimitiveTypeCode@661972b0
    m_current = 0.0;
    // m_charge com.eprosima.idl.parser.typecode.PrimitiveTypeCode@5af3afd9
    m_charge = 0.0;
    // m_capacity com.eprosima.idl.parser.typecode.PrimitiveTypeCode@323b36e0
    m_capacity = 0.0;
    // m_design_capacity com.eprosima.idl.parser.typecode.PrimitiveTypeCode@2e005c4b
    m_design_capacity = 0.0;
    // m_percentage com.eprosima.idl.parser.typecode.PrimitiveTypeCode@4567f35d
    m_percentage = 0.0;
    // m_power_supply_status com.eprosima.idl.parser.typecode.PrimitiveTypeCode@5ffead27
    m_power_supply_status = 0;
    // m_power_supply_health com.eprosima.idl.parser.typecode.PrimitiveTypeCode@6356695f
    m_power_supply_health = 0;
    // m_power_supply_technology com.eprosima.idl.parser.typecode.PrimitiveTypeCode@4f18837a
    m_power_supply_technology = 0;
    // m_present com.eprosima.idl.parser.typecode.PrimitiveTypeCode@359f7cdf
    m_present = false;
    // m_cell_voltage com.eprosima.idl.parser.typecode.SequenceTypeCode@1fa268de

    // m_cell_temperature com.eprosima.idl.parser.typecode.SequenceTypeCode@4f6ee6e4

    // m_location com.eprosima.idl.parser.typecode.StringTypeCode@4466af20
    m_location = "";
    // m_serial_number com.eprosima.idl.parser.typecode.StringTypeCode@3e58a80e
    m_serial_number = "";
}

eprosima::sensor_msgs::msg::BatteryState::~BatteryState()
{
}

eprosima::sensor_msgs::msg::BatteryState::BatteryState(const BatteryState &x)
{
    m_header = x.m_header;
    m_voltage = x.m_voltage;
    m_temperature = x.m_temperature;
    m_current = x.m_current;
    m_charge = x.m_charge;
    m_capacity = x.m_capacity;
    m_design_capacity = x.m_design_capacity;
    m_percentage = x.m_percentage;
    m_power_supply_status = x.m_power_supply_status;
    m_power_supply_health = x.m_power_supply_health;
    m_power_supply_technology = x.m_power_supply_technology;
    m_present = x.m_present;
    m_cell_voltage = x.m_cell_voltage;
    m_cell_temperature = x.m_cell_temperature;
    m_location = x.m_location;
    m_serial_number = x.m_serial_number;
}

eprosima::sensor_msgs::msg::BatteryState::BatteryState(BatteryState &&x)
{
    m_header = std::move(x.m_header);
    m_voltage = x.m_voltage;
    m_temperature = x.m_temperature;
    m_current = x.m_current;
    m_charge = x.m_charge;
    m_capacity = x.m_capacity;
    m_design_capacity = x.m_design_capacity;
    m_percentage = x.m_percentage;
    m_power_supply_status = x.m_power_supply_status;
    m_power_supply_health = x.m_power_supply_health;
    m_power_supply_technology = x.m_power_supply_technology;
    m_present = x.m_present;
    m_cell_voltage = std::move(x.m_cell_voltage);
    m_cell_temperature = std::move(x.m_cell_temperature);
    m_location = std::move(x.m_location);
    m_serial_number = std::move(x.m_serial_number);
}

eprosima::sensor_msgs::msg::BatteryState &eprosima::sensor_msgs::msg::BatteryState::operator=(const BatteryState &x)
{

    m_header = x.m_header;
    m_voltage = x.m_voltage;
    m_temperature = x.m_temperature;
    m_current = x.m_current;
    m_charge = x.m_charge;
    m_capacity = x.m_capacity;
    m_design_capacity = x.m_design_capacity;
    m_percentage = x.m_percentage;
    m_power_supply_status = x.m_power_supply_status;
    m_power_supply_health = x.m_power_supply_health;
    m_power_supply_technology = x.m_power_supply_technology;
    m_present = x.m_present;
    m_cell_voltage = x.m_cell_voltage;
    m_cell_temperature = x.m_cell_temperature;
    m_location = x.m_location;
    m_serial_number = x.m_serial_number;

    return *this;
}

eprosima::sensor_msgs::msg::BatteryState &eprosima::sensor_msgs::msg::BatteryState::operator=(BatteryState &&x)
{

    m_header = std::move(x.m_header);
    m_voltage = x.m_voltage;
    m_temperature = x.m_temperature;
    m_current = x.m_current;
    m_charge = x.m_charge;
    m_capacity = x.m_capacity;
    m_design_capacity = x.m_design_capacity;
    m_percentage = x.m_percentage;
    m_power_supply_status = x.m_power_supply_status;
    m_power_supply_health = x.m_power_supply_health;
    m_power_supply_technology = x.m_power_supply_technology;
    m_present = x.m_present;
    m_cell_voltage = std::move(x.m_cell_voltage);
    m_cell_temperature = std::move(x.m_cell_temperature);
    m_location = std::move(x.m_location);
    m_serial_number = std::move(x.m_serial_number);

    return *this;
}

size_t eprosima::sensor_msgs::msg::BatteryState::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;

    current_alignment += eprosima::std_msgs::msg::Header::getMaxCdrSerializedSize(current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += (100 * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += (100 * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    return current_alignment - initial_alignment;
}

size_t eprosima::sensor_msgs::msg::BatteryState::getCdrSerializedSize(const eprosima::sensor_msgs::msg::BatteryState &data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;

    current_alignment += eprosima::std_msgs::msg::Header::getCdrSerializedSize(data.header(), current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += (data.cell_voltage().size() * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += (data.cell_temperature().size() * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.location().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.serial_number().size() + 1;

    return current_alignment - initial_alignment;
}

void eprosima::sensor_msgs::msg::BatteryState::serialize(eprosima::fastcdr::Cdr &scdr) const
{

    scdr << m_header;
    scdr << m_voltage;
    scdr << m_temperature;
    scdr << m_current;
    scdr << m_charge;
    scdr << m_capacity;
    scdr << m_design_capacity;
    scdr << m_percentage;
    scdr << m_power_supply_status;
    scdr << m_power_supply_health;
    scdr << m_power_supply_technology;
    scdr << m_present;
    scdr << m_cell_voltage;
    scdr << m_cell_temperature;
    scdr << m_location;
    scdr << m_serial_number;
}

void eprosima::sensor_msgs::msg::BatteryState::deserialize(eprosima::fastcdr::Cdr &dcdr)
{

    dcdr >> m_header;
    dcdr >> m_voltage;
    dcdr >> m_temperature;
    dcdr >> m_current;
    dcdr >> m_charge;
    dcdr >> m_capacity;
    dcdr >> m_design_capacity;
    dcdr >> m_percentage;
    dcdr >> m_power_supply_status;
    dcdr >> m_power_supply_health;
    dcdr >> m_power_supply_technology;
    dcdr >> m_present;
    dcdr >> m_cell_voltage;
    dcdr >> m_cell_temperature;
    dcdr >> m_location;
    dcdr >> m_serial_number;
}

/*!
 * @brief This function copies the value in member header
 * @param _header New value to be copied in member header
 */
void eprosima::sensor_msgs::msg::BatteryState::header(const eprosima::std_msgs::msg::Header &_header)
{
    m_header = _header;
}

/*!
 * @brief This function moves the value in member header
 * @param _header New value to be moved in member header
 */
void eprosima::sensor_msgs::msg::BatteryState::header(eprosima::std_msgs::msg::Header &&_header)
{
    m_header = std::move(_header);
}

/*!
 * @brief This function returns a constant reference to member header
 * @return Constant reference to member header
 */
const eprosima::std_msgs::msg::Header &eprosima::sensor_msgs::msg::BatteryState::header() const
{
    return m_header;
}

/*!
 * @brief This function returns a reference to member header
 * @return Reference to member header
 */
eprosima::std_msgs::msg::Header &eprosima::sensor_msgs::msg::BatteryState::header()
{
    return m_header;
}
/*!
 * @brief This function sets a value in member voltage
 * @param _voltage New value for member voltage
 */
void eprosima::sensor_msgs::msg::BatteryState::voltage(float _voltage)
{
    m_voltage = _voltage;
}

/*!
 * @brief This function returns the value of member voltage
 * @return Value of member voltage
 */
float eprosima::sensor_msgs::msg::BatteryState::voltage() const
{
    return m_voltage;
}

/*!
 * @brief This function returns a reference to member voltage
 * @return Reference to member voltage
 */
float &eprosima::sensor_msgs::msg::BatteryState::voltage()
{
    return m_voltage;
}

/*!
 * @brief This function sets a value in member temperature
 * @param _temperature New value for member temperature
 */
void eprosima::sensor_msgs::msg::BatteryState::temperature(float _temperature)
{
    m_temperature = _temperature;
}

/*!
 * @brief This function returns the value of member temperature
 * @return Value of member temperature
 */
float eprosima::sensor_msgs::msg::BatteryState::temperature() const
{
    return m_temperature;
}

/*!
 * @brief This function returns a reference to member temperature
 * @return Reference to member temperature
 */
float &eprosima::sensor_msgs::msg::BatteryState::temperature()
{
    return m_temperature;
}

/*!
 * @brief This function sets a value in member current
 * @param _current New value for member current
 */
void eprosima::sensor_msgs::msg::BatteryState::current(float _current)
{
    m_current = _current;
}

/*!
 * @brief This function returns the value of member current
 * @return Value of member current
 */
float eprosima::sensor_msgs::msg::BatteryState::current() const
{
    return m_current;
}

/*!
 * @brief This function returns a reference to member current
 * @return Reference to member current
 */
float &eprosima::sensor_msgs::msg::BatteryState::current()
{
    return m_current;
}

/*!
 * @brief This function sets a value in member charge
 * @param _charge New value for member charge
 */
void eprosima::sensor_msgs::msg::BatteryState::charge(float _charge)
{
    m_charge = _charge;
}

/*!
 * @brief This function returns the value of member charge
 * @return Value of member charge
 */
float eprosima::sensor_msgs::msg::BatteryState::charge() const
{
    return m_charge;
}

/*!
 * @brief This function returns a reference to member charge
 * @return Reference to member charge
 */
float &eprosima::sensor_msgs::msg::BatteryState::charge()
{
    return m_charge;
}

/*!
 * @brief This function sets a value in member capacity
 * @param _capacity New value for member capacity
 */
void eprosima::sensor_msgs::msg::BatteryState::capacity(float _capacity)
{
    m_capacity = _capacity;
}

/*!
 * @brief This function returns the value of member capacity
 * @return Value of member capacity
 */
float eprosima::sensor_msgs::msg::BatteryState::capacity() const
{
    return m_capacity;
}

/*!
 * @brief This function returns a reference to member capacity
 * @return Reference to member capacity
 */
float &eprosima::sensor_msgs::msg::BatteryState::capacity()
{
    return m_capacity;
}

/*!
 * @brief This function sets a value in member design_capacity
 * @param _design_capacity New value for member design_capacity
 */
void eprosima::sensor_msgs::msg::BatteryState::design_capacity(float _design_capacity)
{
    m_design_capacity = _design_capacity;
}

/*!
 * @brief This function returns the value of member design_capacity
 * @return Value of member design_capacity
 */
float eprosima::sensor_msgs::msg::BatteryState::design_capacity() const
{
    return m_design_capacity;
}

/*!
 * @brief This function returns a reference to member design_capacity
 * @return Reference to member design_capacity
 */
float &eprosima::sensor_msgs::msg::BatteryState::design_capacity()
{
    return m_design_capacity;
}

/*!
 * @brief This function sets a value in member percentage
 * @param _percentage New value for member percentage
 */
void eprosima::sensor_msgs::msg::BatteryState::percentage(float _percentage)
{
    m_percentage = _percentage;
}

/*!
 * @brief This function returns the value of member percentage
 * @return Value of member percentage
 */
float eprosima::sensor_msgs::msg::BatteryState::percentage() const
{
    return m_percentage;
}

/*!
 * @brief This function returns a reference to member percentage
 * @return Reference to member percentage
 */
float &eprosima::sensor_msgs::msg::BatteryState::percentage()
{
    return m_percentage;
}

/*!
 * @brief This function sets a value in member power_supply_status
 * @param _power_supply_status New value for member power_supply_status
 */
void eprosima::sensor_msgs::msg::BatteryState::power_supply_status(uint8_t _power_supply_status)
{
    m_power_supply_status = _power_supply_status;
}

/*!
 * @brief This function returns the value of member power_supply_status
 * @return Value of member power_supply_status
 */
uint8_t eprosima::sensor_msgs::msg::BatteryState::power_supply_status() const
{
    return m_power_supply_status;
}

/*!
 * @brief This function returns a reference to member power_supply_status
 * @return Reference to member power_supply_status
 */
uint8_t &eprosima::sensor_msgs::msg::BatteryState::power_supply_status()
{
    return m_power_supply_status;
}

/*!
 * @brief This function sets a value in member power_supply_health
 * @param _power_supply_health New value for member power_supply_health
 */
void eprosima::sensor_msgs::msg::BatteryState::power_supply_health(uint8_t _power_supply_health)
{
    m_power_supply_health = _power_supply_health;
}

/*!
 * @brief This function returns the value of member power_supply_health
 * @return Value of member power_supply_health
 */
uint8_t eprosima::sensor_msgs::msg::BatteryState::power_supply_health() const
{
    return m_power_supply_health;
}

/*!
 * @brief This function returns a reference to member power_supply_health
 * @return Reference to member power_supply_health
 */
uint8_t &eprosima::sensor_msgs::msg::BatteryState::power_supply_health()
{
    return m_power_supply_health;
}

/*!
 * @brief This function sets a value in member power_supply_technology
 * @param _power_supply_technology New value for member power_supply_technology
 */
void eprosima::sensor_msgs::msg::BatteryState::power_supply_technology(uint8_t _power_supply_technology)
{
    m_power_supply_technology = _power_supply_technology;
}

/*!
 * @brief This function returns the value of member power_supply_technology
 * @return Value of member power_supply_technology
 */
uint8_t eprosima::sensor_msgs::msg::BatteryState::power_supply_technology() const
{
    return m_power_supply_technology;
}

/*!
 * @brief This function returns a reference to member power_supply_technology
 * @return Reference to member power_supply_technology
 */
uint8_t &eprosima::sensor_msgs::msg::BatteryState::power_supply_technology()
{
    return m_power_supply_technology;
}

/*!
 * @brief This function sets a value in member present
 * @param _present New value for member present
 */
void eprosima::sensor_msgs::msg::BatteryState::present(bool _present)
{
    m_present = _present;
}

/*!
 * @brief This function returns the value of member present
 * @return Value of member present
 */
bool eprosima::sensor_msgs::msg::BatteryState::present() const
{
    return m_present;
}

/*!
 * @brief This function returns a reference to member present
 * @return Reference to member present
 */
bool &eprosima::sensor_msgs::msg::BatteryState::present()
{
    return m_present;
}

/*!
 * @brief This function copies the value in member cell_voltage
 * @param _cell_voltage New value to be copied in member cell_voltage
 */
void eprosima::sensor_msgs::msg::BatteryState::cell_voltage(const std::vector<float> &_cell_voltage)
{
    m_cell_voltage = _cell_voltage;
}

/*!
 * @brief This function moves the value in member cell_voltage
 * @param _cell_voltage New value to be moved in member cell_voltage
 */
void eprosima::sensor_msgs::msg::BatteryState::cell_voltage(std::vector<float> &&_cell_voltage)
{
    m_cell_voltage = std::move(_cell_voltage);
}

/*!
 * @brief This function returns a constant reference to member cell_voltage
 * @return Constant reference to member cell_voltage
 */
const std::vector<float> &eprosima::sensor_msgs::msg::BatteryState::cell_voltage() const
{
    return m_cell_voltage;
}

/*!
 * @brief This function returns a reference to member cell_voltage
 * @return Reference to member cell_voltage
 */
std::vector<float> &eprosima::sensor_msgs::msg::BatteryState::cell_voltage()
{
    return m_cell_voltage;
}
/*!
 * @brief This function copies the value in member cell_temperature
 * @param _cell_temperature New value to be copied in member cell_temperature
 */
void eprosima::sensor_msgs::msg::BatteryState::cell_temperature(const std::vector<float> &_cell_temperature)
{
    m_cell_temperature = _cell_temperature;
}

/*!
 * @brief This function moves the value in member cell_temperature
 * @param _cell_temperature New value to be moved in member cell_temperature
 */
void eprosima::sensor_msgs::msg::BatteryState::cell_temperature(std::vector<float> &&_cell_temperature)
{
    m_cell_temperature = std::move(_cell_temperature);
}

/*!
 * @brief This function returns a constant reference to member cell_temperature
 * @return Constant reference to member cell_temperature
 */
const std::vector<float> &eprosima::sensor_msgs::msg::BatteryState::cell_temperature() const
{
    return m_cell_temperature;
}

/*!
 * @brief This function returns a reference to member cell_temperature
 * @return Reference to member cell_temperature
 */
std::vector<float> &eprosima::sensor_msgs::msg::BatteryState::cell_temperature()
{
    return m_cell_temperature;
}
/*!
 * @brief This function copies the value in member location
 * @param _location New value to be copied in member location
 */
void eprosima::sensor_msgs::msg::BatteryState::location(const std::string &_location)
{
    m_location = _location;
}

/*!
 * @brief This function moves the value in member location
 * @param _location New value to be moved in member location
 */
void eprosima::sensor_msgs::msg::BatteryState::location(std::string &&_location)
{
    m_location = std::move(_location);
}

/*!
 * @brief This function returns a constant reference to member location
 * @return Constant reference to member location
 */
const std::string &eprosima::sensor_msgs::msg::BatteryState::location() const
{
    return m_location;
}

/*!
 * @brief This function returns a reference to member location
 * @return Reference to member location
 */
std::string &eprosima::sensor_msgs::msg::BatteryState::location()
{
    return m_location;
}
/*!
 * @brief This function copies the value in member serial_number
 * @param _serial_number New value to be copied in member serial_number
 */
void eprosima::sensor_msgs::msg::BatteryState::serial_number(const std::string &_serial_number)
{
    m_serial_number = _serial_number;
}

/*!
 * @brief This function moves the value in member serial_number
 * @param _serial_number New value to be moved in member serial_number
 */
void eprosima::sensor_msgs::msg::BatteryState::serial_number(std::string &&_serial_number)
{
    m_serial_number = std::move(_serial_number);
}

/*!
 * @brief This function returns a constant reference to member serial_number
 * @return Constant reference to member serial_number
 */
const std::string &eprosima::sensor_msgs::msg::BatteryState::serial_number() const
{
    return m_serial_number;
}

/*!
 * @brief This function returns a reference to member serial_number
 * @return Reference to member serial_number
 */
std::string &eprosima::sensor_msgs::msg::BatteryState::serial_number()
{
    return m_serial_number;
}

size_t eprosima::sensor_msgs::msg::BatteryState::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
    size_t current_align = current_alignment;

    return current_align;
}

bool eprosima::sensor_msgs::msg::BatteryState::isKeyDefined()
{
    return false;
}

void eprosima::sensor_msgs::msg::BatteryState::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
    (void)scdr;
}
